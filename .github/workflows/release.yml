name: Release Every 10 Commits

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  auto-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Count commits since last release
        id: commits
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            COMMIT_COUNT=$(git rev-list --count HEAD)
          else
            COMMIT_COUNT=$(git rev-list --count ${LATEST_TAG}..HEAD)
          fi

          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          echo "Commits since last release: $COMMIT_COUNT"

      - name: Create release if 10+ commits
        if: steps.commits.outputs.commit_count >= 10
        run: |
          LATEST_TAG="${{ steps.commits.outputs.latest_tag }}"

          # Determine next version
          if [ -z "$LATEST_TAG" ]; then
            NEXT_VERSION="v0.1.0"
          else
            VERSION_WITHOUT_V=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_WITHOUT_V"
            MINOR=$((MINOR + 1))
            NEXT_VERSION="v${MAJOR}.${MINOR}.0"
          fi

          # Update version in files
          sed -i "s/__version__ = \".*\"/__version__ = \"${NEXT_VERSION#v}\"/" core.py
          sed -i "s/version = \".*\"/version = \"${NEXT_VERSION#v}\"/" pyproject.toml

          # Commit and push version bump
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add core.py pyproject.toml
          git commit -m "chore: bump version to $NEXT_VERSION"
          git push

          # Create and push tag
          git tag -a "$NEXT_VERSION" -m "Release $NEXT_VERSION"
          git push origin "$NEXT_VERSION"

          # Generate changelog
          if [ -z "$LATEST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse ${LATEST_TAG}..HEAD~1)
          fi

          # Create GitHub Release
          gh release create "$NEXT_VERSION" \
            --title "Release $NEXT_VERSION" \
            --notes "## Changes

          $CHANGELOG

          ---
          *Auto-generated after ${{ steps.commits.outputs.commit_count }} commits*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
