name: Release on Tag

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release from tag
        run: |
          TAG="${{ github.ref_name }}"
          echo "Tag detected: $TAG"

          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "Release $TAG already exists. Skipping."
            exit 0
          fi

          # Get previous tag for changelog range
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="${PREVIOUS_TAG}..${TAG}"
          fi

          echo "Generating changelog for range: $COMMIT_RANGE"

          # Get commits by type with GitHub usernames and commit hashes
          FEATURES=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- feat:" || echo "")
          FIXES=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- fix:" || echo "")
          DOCS=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- docs:" || echo "")
          CHORES=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- chore:" || echo "")
          PERF=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- perf:" || echo "")
          BUILD=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- build:" || echo "")
          STYLE=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- style:" || echo "")
          OTHER=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep -v "^- \(feat\|fix\|docs\|chore\|perf\|build\|style\):" || echo "")

          # Build changelog with sections
          CHANGELOG=""

          if [ -n "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG### üöÄ Features
          $FEATURES

          "
          fi

          if [ -n "$FIXES" ]; then
            CHANGELOG="$CHANGELOG### üêõ Bug Fixes
          $FIXES

          "
          fi

          if [ -n "$DOCS" ]; then
            CHANGELOG="$CHANGELOG### üìö Documentation
          $DOCS

          "
          fi

          if [ -n "$BUILD" ]; then
            CHANGELOG="$CHANGELOG### üèóÔ∏è Build
          $BUILD

          "
          fi

          if [ -n "$PERF" ]; then
            CHANGELOG="$CHANGELOG### ‚ö° Performance
          $PERF

          "
          fi

          if [ -n "$STYLE" ]; then
            CHANGELOG="$CHANGELOG### üé® Style
          $STYLE

          "
          fi

          if [ -n "$CHORES" ]; then
            CHANGELOG="$CHANGELOG### üîß Chores
          $CHORES

          "
          fi

          if [ -n "$OTHER" ]; then
            CHANGELOG="$CHANGELOG### üîÑ Other Changes
          $OTHER

          "
          fi

          # Create GitHub Release with custom changelog
          gh release create "$TAG" \
            --title "Release $TAG" \
            --notes "## Changes

          $CHANGELOG
          ---
          *Tag-driven release*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
