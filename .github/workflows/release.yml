name: Release on Tag

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify release from main branch
        run: |
          echo "üîç Verifying tag was created from main branch..."
          git fetch origin main

          # Check if the current commit (tag) is an ancestor of or in main branch
          if git merge-base --is-ancestor ${{ github.sha }} origin/main; then
            echo "‚úÖ SUCCESS: Tag '${{ github.ref_name }}' was created from main branch"
          else
            echo "‚ùå ERROR: Tag '${{ github.ref_name }}' was NOT created from main branch"
            echo "üö´ Releases are only allowed from main branch for security"
            echo "üí° Please create the tag from main branch and try again"
            exit 1
          fi

      - name: Validate SemVer format
        run: |
          TAG="${{ github.ref_name }}"
          echo "üîç Validating SemVer format for tag: $TAG"

          # SemVer regex pattern: v{Major}.{Minor}.{Patch}[-{PreRelease}][+{BuildMetadata}]
          # Examples: v1.2.3, v1.0.0-alpha.1, v2.1.0-rc.1, v1.2.3-beta.2+build.123
          SEMVER_PATTERN="^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"

          if echo "$TAG" | grep -qE "$SEMVER_PATTERN"; then
            echo "‚úÖ SUCCESS: Tag '$TAG' follows SemVer format"

            # Extract version components for validation
            VERSION=${TAG#v}  # Remove 'v' prefix
            MAJOR=$(echo "$VERSION" | cut -d'.' -f1)
            MINOR=$(echo "$VERSION" | cut -d'.' -f2)
            PATCH=$(echo "$VERSION" | cut -d'.' -f3 | cut -d'-' -f1)

            echo "üìä Version components:"
            echo "   Major: $MAJOR (Breaking changes)"
            echo "   Minor: $MINOR (New features, backward compatible)"
            echo "   Patch: $PATCH (Bug fixes, backward compatible)"

            if echo "$VERSION" | grep -q "-"; then
              PRERELEASE=$(echo "$VERSION" | cut -d'-' -f2 | cut -d'+' -f1)
              echo "   Pre-release: $PRERELEASE (alpha, beta, rc, etc.)"
            fi

            if echo "$VERSION" | grep -q "+"; then
              BUILD=$(echo "$VERSION" | cut -d'+' -f2)
              echo "   Build metadata: $BUILD"
            fi
          else
            echo "‚ùå ERROR: Tag '$TAG' does not follow SemVer format"
            echo ""
            echo "üìã Required SemVer format: v{Major}.{Minor}.{Patch}[-{PreRelease}][+{BuildMetadata}]"
            echo ""
            echo "‚úÖ Valid examples:"
            echo "   v1.0.0          (Major release)"
            echo "   v1.2.3          (Standard release)"
            echo "   v2.1.0-alpha.1  (Pre-release with alpha)"
            echo "   v1.0.0-beta.2   (Pre-release with beta)"
            echo "   v1.2.3-rc.1     (Release candidate)"
            echo "   v1.0.0+build.1  (With build metadata)"
            echo ""
            echo "‚ùå Invalid examples:"
            echo "   v1.2            (Missing patch version)"
            echo "   v1.2.3.4        (Too many version numbers)"
            echo "   version-1.0.0   (Wrong prefix)"
            echo "   1.0.0           (Missing 'v' prefix)"
            echo ""
            echo "üí° Please create a tag following SemVer format and try again"
            exit 1
          fi

      - name: Create release from tag
        run: |
          TAG="${{ github.ref_name }}"
          echo "Tag detected: $TAG"

          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "Release $TAG already exists. Skipping."
            exit 0
          fi

          # Get previous tag for changelog range
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="${PREVIOUS_TAG}..${TAG}"
          fi

          echo "Generating changelog for range: $COMMIT_RANGE"

          # Get commits by type with GitHub usernames and commit hashes
          FEATURES=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- feat:" || echo "")
          FIXES=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- fix:" || echo "")
          DOCS=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- docs:" || echo "")
          CHORES=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- chore:" || echo "")
          PERF=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- perf:" || echo "")
          BUILD=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- build:" || echo "")
          STYLE=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- style:" || echo "")
          OTHER=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep -v "^- \(feat\|fix\|docs\|chore\|perf\|build\|style\):" || echo "")

          # Build changelog with sections
          CHANGELOG=""

          if [ -n "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG### üöÄ Features
          $FEATURES

          "
          fi

          if [ -n "$FIXES" ]; then
            CHANGELOG="$CHANGELOG### üêõ Bug Fixes
          $FIXES

          "
          fi

          if [ -n "$DOCS" ]; then
            CHANGELOG="$CHANGELOG### üìö Documentation
          $DOCS

          "
          fi

          if [ -n "$BUILD" ]; then
            CHANGELOG="$CHANGELOG### üèóÔ∏è Build
          $BUILD

          "
          fi

          if [ -n "$PERF" ]; then
            CHANGELOG="$CHANGELOG### ‚ö° Performance
          $PERF

          "
          fi

          if [ -n "$STYLE" ]; then
            CHANGELOG="$CHANGELOG### üé® Style
          $STYLE

          "
          fi

          if [ -n "$CHORES" ]; then
            CHANGELOG="$CHANGELOG### üîß Chores
          $CHORES

          "
          fi

          if [ -n "$OTHER" ]; then
            CHANGELOG="$CHANGELOG### üîÑ Other Changes
          $OTHER

          "
          fi

          # Create GitHub Release with custom changelog
          gh release create "$TAG" \
            --title "Release $TAG" \
            --notes "## Changes

          $CHANGELOG
          ---
          *Tag-driven release*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
