name: Docker Release

on:
  release:
    types: [published, prereleased, created]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read release tag
        id: releasetag
        run: |
          TAG="${{ github.event.release.tag_name }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Detected release tag: $TAG"

      - name: Validate SemVer format
        run: |
          TAG="${{ steps.releasetag.outputs.tag }}"
          echo "üîç Validating SemVer format for tag: $TAG"

          SEMVER_PATTERN="^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"
          if echo "$TAG" | grep -qE "$SEMVER_PATTERN"; then
            echo "‚úÖ SUCCESS: Tag '$TAG' follows SemVer format"
          else
            echo "‚ùå ERROR: Tag '$TAG' does not follow SemVer format"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.releasetag.outputs.tag }}
            type=semver,pattern={{version}},value=${{ steps.releasetag.outputs.tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.releasetag.outputs.tag }}
            type=semver,pattern={{major}},value=${{ steps.releasetag.outputs.tag }}
            type=raw,value=latest,enable=true
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=MLOps Release Log Application
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.releasetag.outputs.tag }}
            org.opencontainers.image.created=${{ github.event.release.published_at }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.releasetag.outputs.tag }}
            BUILD_DATE=${{ github.event.release.published_at }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.releasetag.outputs.tag }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM to release
        run: |
          TAG="${{ steps.releasetag.outputs.tag }}"
          gh release upload "$TAG" sbom.spdx.json --clobber
          echo "SBOM uploaded to release $TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.releasetag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
