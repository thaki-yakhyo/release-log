name: Docker Release

on:
  release:
    types: [published, created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'SemVer tag to build (e.g., v2.5.3)'
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          if [ -z "$TAG" ]; then
            echo "❌ No tag provided"
            exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Using tag: $TAG"

      - name: Verify release from main branch
        run: |
          echo "🔍 Verifying tag commit is on main..."
          git fetch origin main
          TAG="${{ steps.tag.outputs.tag }}"
          TAG_SHA=$(git rev-list -n 1 "$TAG")
          if git merge-base --is-ancestor "$TAG_SHA" origin/main; then
            echo "✅ Tag commit is on main"
          else
            echo "❌ Tag commit is not on main; aborting for security"
            exit 1
          fi

      - name: Validate SemVer format
        id: semver
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          echo "🔍 Validating SemVer format for tag: $TAG"
          SEMVER_PATTERN="^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"
          if ! echo "$TAG" | grep -qE "$SEMVER_PATTERN"; then
            echo "❌ ERROR: Tag '$TAG' does not follow SemVer format"
            exit 1
          fi
          VERSION=${TAG#v}
          MAJOR=${VERSION%%.*}
          MINOR=${VERSION#*.}; MINOR=${MINOR%%.*}
          PATCH=${VERSION##*.}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.tag }}
            type=raw,value=${{ steps.semver.outputs.version }}
            type=raw,value=${{ steps.semver.outputs.major }}.${{ steps.semver.outputs.minor }}
            type=raw,value=${{ steps.semver.outputs.major }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=MLOps Release Log Application
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.tag.outputs.tag }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp || '' }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.tag.outputs.tag }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || '' }}
            VCS_REF=${{ github.sha }}
          # Advanced caching strategy for faster builds
          cache-from: |
            type=gha,scope=build-${{ github.ref_name }}
            type=gha,scope=build-main
          cache-to: type=gha,mode=max,scope=build-${{ github.ref_name }}
          # Enable BuildKit inline cache
          outputs: type=image,push=true,compression=zstd

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM to release (best-effort)
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          if gh release view "$TAG" > /dev/null 2>&1; then
            gh release upload "$TAG" sbom.spdx.json --clobber
            echo "SBOM uploaded to release $TAG"
          else
            echo "Release $TAG not found; skipping SBOM upload"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab (if present)
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
