name: Docker Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify release from main branch
        run: |
          echo "🔍 Verifying tag was created from main branch..."
          git fetch origin main

          # Check if the current commit (tag) is an ancestor of or in main branch
          if git merge-base --is-ancestor ${{ github.sha }} origin/main; then
            echo "✅ SUCCESS: Tag '${{ github.ref_name }}' was created from main branch"
          else
            echo "❌ ERROR: Tag '${{ github.ref_name }}' was NOT created from main branch"
            echo "🚫 Docker releases are only allowed from main branch for security"
            echo "💡 Please create the tag from main branch and try again"
            exit 1
          fi

      - name: Validate SemVer format
        run: |
          TAG="${{ github.ref_name }}"
          echo "🔍 Validating SemVer format for tag: $TAG"

          # SemVer regex pattern: v{Major}.{Minor}.{Patch}[-{PreRelease}][+{BuildMetadata}]
          SEMVER_PATTERN="^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"

          if echo "$TAG" | grep -qE "$SEMVER_PATTERN"; then
            echo "✅ SUCCESS: Tag '$TAG' follows SemVer format"

            # Extract version components
            VERSION=${TAG#v}
            MAJOR=$(echo "$VERSION" | cut -d'.' -f1)
            MINOR=$(echo "$VERSION" | cut -d'.' -f2)
            PATCH=$(echo "$VERSION" | cut -d'.' -f3 | cut -d'-' -f1)

            echo "📊 Docker image will be tagged with:"
            echo "   $TAG (exact version)"
            echo "   $MAJOR.$MINOR.$PATCH (semver)"
            echo "   $MAJOR.$MINOR (minor version)"
            echo "   $MAJOR (major version)"

            if echo "$VERSION" | grep -q "-"; then
              PRERELEASE=$(echo "$VERSION" | cut -d'-' -f2 | cut -d'+' -f1)
              echo "   Pre-release: $PRERELEASE"
            fi
          else
            echo "❌ ERROR: Tag '$TAG' does not follow SemVer format"
            echo "🐳 Docker images require valid SemVer tags for proper versioning"
            echo "💡 Please use format: v{Major}.{Minor}.{Patch}[-{PreRelease}]"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=MLOps Release Log Application
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM to release
        run: |
          TAG="${{ github.ref_name }}"
          if gh release view "$TAG" > /dev/null 2>&1; then
            gh release upload "$TAG" sbom.spdx.json --clobber
            echo "SBOM uploaded to release $TAG"
          else
            echo "Release $TAG not found, skipping SBOM upload"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
