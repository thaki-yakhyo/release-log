name: Release Please

on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      pr: ${{ steps.release.outputs.pr }}
    steps:
      - name: Run release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          # Release type for simple projects
          release-type: simple

          # Package name (used in release titles)
          package-name: release-log

          # Token for creating PRs and releases
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show release-please outputs
        run: |
          echo "üîç release-please completed successfully"
          echo "Check the workflow outputs and subsequent jobs for results"

  # Enhance release with author information
  enhance-release:
    needs: release-please
    runs-on: ubuntu-latest
    if: needs.release-please.outputs.release_created == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enhance release notes with author information
        run: |
          TAG="${{ needs.release-please.outputs.tag_name }}"
          echo "üîç Enhancing release $TAG with author information..."

          # Get the previous tag for commit range
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="${PREVIOUS_TAG}..${TAG}"
          fi

          echo "üìä Analyzing commits in range: $COMMIT_RANGE"

          # Get existing release notes
          EXISTING_NOTES=$(gh release view "$TAG" --json body --jq '.body')

          # Generate enhanced changelog with authors
          FEATURES=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- feat:" || echo "")
          FIXES=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- fix:" || echo "")
          DOCS=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- docs:" || echo "")
          BUILD=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- build:" || echo "")
          PERF=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- perf:" || echo "")
          CHORE=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep "^- chore:" || echo "")
          OTHER=$(git log --pretty=format:"- %s (%h) (by @%an)" --reverse $COMMIT_RANGE | grep -v "^- \(feat\|fix\|docs\|build\|perf\|chore\):" || echo "")

          # Build enhanced changelog
          ENHANCED_CHANGELOG=""

          if [ -n "$FEATURES" ]; then
            ENHANCED_CHANGELOG="$ENHANCED_CHANGELOG### üöÄ Features
          $FEATURES

          "
          fi

          if [ -n "$FIXES" ]; then
            ENHANCED_CHANGELOG="$ENHANCED_CHANGELOG### üêõ Bug Fixes
          $FIXES

          "
          fi

          if [ -n "$DOCS" ]; then
            ENHANCED_CHANGELOG="$ENHANCED_CHANGELOG### üìö Documentation
          $DOCS

          "
          fi

          if [ -n "$BUILD" ]; then
            ENHANCED_CHANGELOG="$ENHANCED_CHANGELOG### üèóÔ∏è Build
          $BUILD

          "
          fi

          if [ -n "$PERF" ]; then
            ENHANCED_CHANGELOG="$ENHANCED_CHANGELOG### ‚ö° Performance
          $PERF

          "
          fi

          if [ -n "$CHORE" ]; then
            ENHANCED_CHANGELOG="$ENHANCED_CHANGELOG### üîß Chores
          $CHORE

          "
          fi

          if [ -n "$OTHER" ]; then
            ENHANCED_CHANGELOG="$ENHANCED_CHANGELOG### üîÑ Other Changes
          $OTHER

          "
          fi

          # Update release with enhanced notes
          gh release edit "$TAG" --notes "## Changes

          $ENHANCED_CHANGELOG
          ---
          *Enhanced release notes with author attribution*"

          echo "‚úÖ Release notes enhanced with author information"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and push Docker image when release is created
  docker-build:
    needs: release-please
    runs-on: ubuntu-latest
    if: needs.release-please.outputs.release_created == 'true'
    permissions:
      contents: write
      packages: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ needs.release-please.outputs.tag_name }}
            type=raw,value=${{ needs.release-please.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Single platform for faster builds (add arm64 only for releases)
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.release-please.outputs.tag_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp || '' }}
            VCS_REF=${{ github.sha }}
          # Optimized caching strategy
          cache-from: |
            type=gha,scope=docker-${{ github.repository }}
            type=gha,scope=docker-main
            type=registry,ref=ghcr.io/${{ github.repository }}:cache
          cache-to: |
            type=gha,mode=max,scope=docker-${{ github.repository }}
            type=registry,ref=ghcr.io/${{ github.repository }}:cache,mode=max
          # Faster compression and inline cache
          outputs: type=image,push=true,compression=gzip,compression-level=1

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}:${{ needs.release-please.outputs.tag_name }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM to release
        run: |
          TAG="${{ needs.release-please.outputs.tag_name }}"
          gh release upload "$TAG" sbom.spdx.json --clobber
          echo "SBOM uploaded to release $TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ needs.release-please.outputs.tag_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
